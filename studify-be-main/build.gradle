plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.9'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.lgcns'
version = '0.0.1-SNAPSHOT'
description = 'Demo project for Spring Boot'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	// 요청바디 검증용( @NotBlank, @Email, @Size 등)
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // 비밀번호 해시(BCrypt)만 쓸 거라 security-crypto만 추가
    implementation 'org.springframework.security:spring-security-crypto'
	
	// env
	implementation 'io.github.cdimascio:dotenv-java:3.0.0'

	// swagger + springboot 3.x 
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.6.0'

	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly    'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly    'io.jsonwebtoken:jjwt-jackson:0.11.5' // JSON 직렬화

	// websocket
	implementation 'org.springframework.boot:spring-boot-starter-websocket'


}

tasks.named('test') {
	useJUnitPlatform()
}
